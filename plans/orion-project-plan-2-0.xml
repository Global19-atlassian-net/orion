<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!--  Use this to test local rendering in firefox. Comment out this line once this plan is linked to portal data. -->
<?xml-stylesheet type="text/xsl" href="project-plan-render.xsl"?>
<!-- <?xml-stylesheet type="text/xsl" href="http://www.eclipse.org/projects/project-plan.xsl"?> -->

<p:plan
  plan-format="1.0"
  xmlns:p="http://www.eclipse.org/project/plan" xmlns="http://www.w3.org/1999/xhtml"
  name="Orion Project">

<p:release projectid="eclipse.orion" version="2.0"/>

<!-- ============================================== -->

<p:introduction>
<div>
<p>
Last revised 14:00 ET November 12th, 2012.
</p>
<p><i>Please send comments about this plan to the</i> <a href="mailto:orion-dev@eclipse.org">orion-dev@eclipse.org</a> <i>developer
  mailing list.</i>

</p>
<p>This document lays out the feature and API set for the next feature release
  of the Orion project after 1.0, designated release 2.0. 
</p>

<p>Plans do not materialize out of nowhere, nor are they entirely static. To
  ensure the planning process is transparent and open to the entire Eclipse community,
  we (the Orion project leadership) post plans in an embryonic form and revise them
  throughout the release cycle. </p>
<p>The first part of the plan deals with the important matters of release deliverables,
  release milestones, target operating environments, and release-to-release compatibility.
  These are all things that need to be clear for any release, even if no features
  were to change. </p>
<p>The remainder of the plan consists of plan items for components of the Orion project.
  Each plan item covers a feature or API that is to be added to the Orion project deliverables, 
  or some aspect of the Orion project that is to be improved. Each plan item has its own entry
  in the Eclipse bugzilla database, with a title and a concise summary (usually
  a single paragraph) that explains the work item at a suitably high enough level
  so that everyone can readily understand what the work item is without having
  to understand the nitty-gritty detail. </p>
<p>Not all plan items represent the same amount of work; some may be quite large,
  others, quite small. Some plan items may involve work that is localized to
  a single component; others may involve coordinated changes to several components;
  other may pervade the entire project. Although some plan items are for work that
  is more pressing than others, the plan items appear in no particular order. </p>
<p>With the previous release as the starting point, this is the plan for how
  we will enhance and improve it. Fixing bugs, improving test coverage, documentation,
  examples, performance tuning, usability, etc. are considered routine ongoing
  maintenance activities and are not included in this plan unless they would
  also involve a significant change to the API or feature set, or involve a significant
  amount of work. The intent of the plan is to account for all interesting feature
  work. </p>
<p>The current status of each plan item is noted: </p>
<ul>

  <li><b>Committed</b> plan item - A committed plan item is one that we have
    decided to address for the release.</li>
  <li><b>Proposed</b> plan item - A proposed plan item is one that we are considering
    addressing for the release. Although we are actively investigating it, we
    are not yet in a position to commit to it, or to say that we won't be able
    to address it. After due consideration, a proposal will either be committed
    or deferred.</li>
  <li><b>Deferred</b> plan item - A reasonable proposal that will not make it
    in to this release for some reason is marked as deferred with a brief note
    as to why it was deferred. Deferred plan items may resurface as committed
    plan items at a later point.</li>
</ul>

</div>
</p:introduction>

<!-- ============================================== -->

<p:release_deliverables>
<div>

<p>The release deliverables have the same form as previous releases, namely: </p>
<ul>
  <li>Source code release for all Orion project deliverables, available as
    versions tagged &quot;R2_0&quot; in the Orion project <a href="http://wiki.eclipse.org/Orion/Getting_the_source">Git
    repositories</a>.</li>

  <li>Packaged Orion server download for Windows, Mac, and Linux</li>
  <li>Hosted Orion server on http://orionhub.org</li>
</ul>
</div>
</p:release_deliverables>

<!-- ============================================== -->

<p:release_milestones>

<p:preamble><p>      
  Release milestones will be occurring at roughly 6 week intervals, followed by a short
  end-game consisting of three release candidates.</p>

</p:preamble>
<p:milestone date="12/07/2012" milestone="M1"><div>2.0M1</div></p:milestone>
<p:milestone date="01/25/2013" milestone="M2"><div>2.0M2</div></p:milestone>
<p:milestone date="02/08/2013" milestone="RC1"><div>2.0RC1</div></p:milestone>
<p:milestone date="02/15/2013" milestone="RC2"><div>2.0RC2</div></p:milestone>
<p:milestone date="02/22/2013" milestone="RC3"><div>2.0RC3</div></p:milestone>
<p:postamble>
<div>

<p>Our target is to complete 2.0 by end of February 2013, in concert with the <a href="http://www.eclipsecon.org/2013/">EclipseCon North America 2013</a>.
  All release deliverables will be available for download as soon as the release has been
  tested and validated in the target operating configurations listed below.
 </p>
</div>
</p:postamble>

</p:release_milestones>

<!-- ============================================== -->

<p:target_environments>

<div>
<p>In order to remain current, each Orion project release targets reasonably current
  operating environments. We focus our testing on a handful of
  popular combinations of operating systems, Web browsers, and Java platforms; these are our <em>reference
  platforms</em>. Orion undoubtedly runs fine in many operating environments
  beyond the reference platforms we test. However, since we do not systematically test
  them we cannot vouch for them. Problems encountered when running Orion on a
  non-reference platform that cannot be recreated on any reference platform will
  be given lower priority than problems with running Orion on a reference platform.
 </p>
 <p>Orion has two broad classes of target environments:</p>

 <ol> 
 <li><b>Client target environments</b>  Indicates environments supported for
 end users of Orion-based web applications.
 </li>
 <li><b>Server target environments</b>  Indicates requirements for the platform
 where the Orion server is installed.
 </li>
 </ol>
<p>Most of the Orion client code is built on HTML5, CSS3, and ECMAScript 5 (JavaScript).
 As such, the chief dependence is on a web browser that supplies rendering and interpretation
 of these languages. In general, Orion requires the most recent major release of the
 major browsers it supports. Due to the fast pace of development in the browser world,
 supporting older browser versions is not a priority for Orion at this early stage of its development.
</p>
<p>Orion 2.0 is tested and validated on the following reference <i>client target environments</i>:</p>

<style type="text/css">
	table.platforms {
		border-width: 1px;
		border-spacing: 0px;
		border-style: solid;
		border-collapse: separate;
	}
	table.platforms th {
		border-width: 1px;
		padding: 3px;
		border-style: inset;
		border-color: black;
		background-color: #B9A9FF;
	}
	table.platforms td {
		border-width: 1px 1px 1px 1px;
		padding: 3px 3px 3px 3px;
		border-style: inset inset inset inset;
		border-color: gray gray gray gray;
	}
	table.platforms tr.c0 td {
		background-color: #FDFDFD;
	}
	table.platforms tr.c1 td {
		background-color: #F4EEFF;
	}
</style>
<center>
	<table class="platforms">
		<tr>
			<th>Operating System</th>
			<th>Version</th>
			<th>Browsers</th>

		</tr>
		<!-- ************ WINDOWS ************** -->
		<tr class="c0">
			<td rowspan="3">Windows</td>
			<td rowspan="3">7</td>
			<td rowspan="1">Chrome</td>
		</tr>

		<tr class = "c0">
			<td rowspan="1">Firefox</td>
		</tr>
		<tr class = "c0">
			<td rowspan="1">Internet Explorer 10.0</td>
		</tr>
		<!-- ************ RHEL ************** -->
		<tr class="c1">

			<td rowspan="2">Red Hat Enterprise Linux</td>
			<td rowspan="2">6</td>
			<td rowspan="1">Chrome</td>
		</tr>
		<tr class = "c1">
			<td rowspan="1">Firefox</td>
		</tr>

		<!-- ************ Mac ************** -->
		<tr class="c0">
			<td rowspan="1">Apple Mac OS X</td>
			<td rowspan="1">10.8.2</td>
			<td rowspan="1">Safari 6.0.2</td>
		</tr>
	</table>

 </center>
<p>Most of the Orion server code is &quot;pure&quot; Java code and has no direct dependence
  on the underlying operating system. The chief dependence is therefore on the
  Java Platform itself. Portions are targeted to specific classes of operating
  environments, requiring their source code to only reference facilities available
  in particular class libraries (e.g. Java SE 5, Java SE 6, etc). In general, the 2.0 
  release of the Orion server is developed and tested on Java SE 6.</p>
<p>There is work underway to additionally support a purely Node.js based Orion environment.  The reference
platform for this work has not yet been established but will be made by the end of the 2.0 release</p>

<p>The Orion 2.0 Java server is tested and validated on the following reference <i>server target environments</i>:</p>
<center>
	<table class="platforms">
		<tr>
			<th>Operating System</th>

			<th>Version</th>
			<th>Hardware</th>
			<th>JRE</th>
		</tr>
		<!-- ************ WINDOWS ************** -->
		<tr class="c0">
			<td rowspan="2">Windows</td>

			<td rowspan="2">7</td>
			<td rowspan="1">x86 32-bit</td>
			<td rowspan="2">Oracle Java 6 Update 29<br/>
				IBM Java 6 SR9 FP2
			</td>
		</tr>
		<tr class="c0">
			<td rowspan="1">x86 64-bit</td>

		</tr>
		<!-- ************ RHEL ************** -->
		<tr class="c1">
			<td rowspan="2">Red Hat Enterprise Linux</td>
			<td rowspan="2">6</td>
			<td rowspan="1">x86 32-bit</td>
			<td rowspan="2">Oracle Java 6 Update 29 (needs to be updated)<br/>

				IBM Java 6 SR9 FP2
			</td>
		</tr>
		<tr class="c1">
			<td rowspan="1">x86 64-bit</td>
		</tr>
		<!-- ************ Mac ************** -->
		<tr class="c0">
			<td rowspan="1">Apple Mac OS X</td>

			<td rowspan="1">10.8.2</td>
			<td rowspan="1">Universal 64-bit</td>
			<td rowspan="1">java version "1.6.0_37"</td>
		</tr>
	</table>
 </center>

<p>As stated above, <i>we expect that Orion works fine on other current
  Java VM and OS versions but we cannot flag these as reference platforms without
  significant community support for testing them.</i></p>

</div>

<p:internationalization>
<p>Orion supports internationalization through plugins which provide message catalogs of translations.
There is an NLS Plugin to aid developers in creating an initial message catalog.  In addition, the
folders, files and contents of the Orion Server have been verified to work with DBCS characters and the
editor itself also supports BIDI.  Orion as provided via Eclipse downloads will only provide English
strings in the 2.0 release.</p>
</p:internationalization>

</p:target_environments>
 
<!-- ============================================== -->

<p:compatibility_with_previous_releases>
<div>

<h3>Compatibility of Release 2.0 with 1.0</h3>
<p>Orion 2.0 guarantees no formal compatibility with Orion 1.0. While most plugins
designed for Orion 1.0 may continue to function when installed in Orion 2.0, there may
be changes to APIs and library functions used by the plugin that have changed in incompatible
ways that prevent it from installing or operating properly.</p>
<p>The incompatibilities will be documented in the Orion help system and on the Wiki</p>

</div>
</p:compatibility_with_previous_releases>
  
<!-- ============================================== -->

<p:themes_and_priorities>

<p:preamble>
<div>
<p>The plan items listed below were defined according to contributor requirements and
community feedback. Each plan item covers a feature or API that is
  to be added to the Orion project deliverables, or some aspect of the Orion project that is
  to be improved. Each plan item has its own entry in the Eclipse bugzilla database, with a title
  and a concise summary (usually a single paragraph) that explains the work item at a suitably
  high enough level so that everyone can readily understand what the work item entails.</p>
<p>Not all plan items represent the same amount of work; some may be quite
  large, others, quite small. Although some plan items are for work that is 
  more pressing than others, the plan items appear in no particular order.
  See the corresponding bugzilla items for up-to-date status information on
  ongoing work and planned delivery milestones.</p>
<p>The current status of each plan item is noted:</p>
<ul>
  <li><b>Committed</b> plan item - A committed plan item is one that we have
    decided to address for the release. In bugzilla, this is reflected by
    having a concrete target milestone assigned.</li>

  <li><b>Proposed</b> plan item - A proposed plan item is one that we are
    considering addressing for the release. Although we are actively
    investigating it, we are not yet in a position to commit to it, or to say
    that we won't be able to address it. After due consideration, a proposal
    will either be committed or deferred. In bugzilla, such items are reflected
    by having a target milestone "1.0" or "---" assigned.</li>
  <li><b>Deferred</b> plan item - A reasonable proposal that will not make it in
    to this release for some reason is marked as deferred with a brief note as
    to why it was deferred. Deferred plan items may resurface as committed plan
    items at a later point. In bugzilla, such items are reflected by having
    a target milestone "---" assigned.</li>
</ul>
</div>
</p:preamble>

<!-- ============================================== -->

<p:theme name="Consumability">

<p:description>
<p>
Orion needs to have no roadblocks for projects to consume Orion components. As such, there needs to be effort to reduce some of our 3rd party dependencies.
In addition, the Orion core needs to be compartmentalized to allow projects or products to consume only the pieces they need to build a web site or platform.
Other changes in Consumability are there for improved uptake of Orion features including the Editor.
</p>
</p:description>

<p:proposed>
	<ul>
	<li>
		<strong>Reduce 3rd party depenencies</strong>
		At the moment there are dependencies which can limit Orion adoption.  These dependencies will be removed.
		[Client]
	</li>
	<li>
		<strong>Improve Editor Capabilities</strong>
		There have been requests to increase the capabilities of the editor (multi-column editing support, content assist changes, additional extension points).
		The support for DBCS and BIDI will continue to be improved upon as well.
		[Client]
	</li>
	<li>
		<strong>Concrete Skinning Examples</strong>
		Provide examples of both skinning Orion to match an existing project deployment and also how to integrate Orion style pages from a 3rd parting into the look
		and feel of an Orion application.
		[Client]
	</li>
	<li>
		<strong>Concrete Delegated UI Examples</strong>
		Feedback on 1.0 included the lack of extensibility for any User Interface components (say a picker from a text editor command). This item is both fixing/allowing
		such extensions and providing concrete examples of how to do this for plugin writers.
		[Client]
	</li>
	<li>
		<strong>Deployment options from Orion source</strong>
		Some project and/or products need the capability to create a deployment or consumption scenerio from the Orion source.  This task is to provide
		a function to specify which portions of the Orion source are required and produce a new source or deployment sub-tree.
		[Client][Server][Node]
	
	</li>
	</ul>
</p:proposed>

<p:committed>
  <p><i>None at this time.</i></p>
</p:committed>

<p:deferred>
  <p><i>None at this time.</i></p>
</p:deferred>

</p:theme>

<!-- ============================================== -->

<p:theme name="Deployment">
<p:description>
<p>
In order to get adoption by web developers and site designers, there needs to be a focus on developer workflows.  This will start with introducing the notion of Projects
in Orion, and then how to transform these projects into a deployable artifact to a web site, or a hosting service for example.
</p>
</p:description>

<p:proposed>
<ul>
	<li>
		<strong>Introducing Projects for Orion</strong>
		Develop a container which represents the artifacts of a Project such as the source location, libraries it might require, and automated deployment workflows.
		[Client][Server]
	</li>
	<li>
		<strong>User interface changes for Project and Workflows</strong>
		Create a new landing experience after login showing current projects or how to create a new project.  Create a sidebar for describing current projects,
		drives (storage), libraries (3rd party), and Deployment steps.[Client]
	</li>
	<li>
		<strong>Support actions for transforming project contents</strong>
		Inevitably, any project under development needs some amount of transformation before actually being deployed to a hosting service. This item is to cover the
		investigation and implementation of needed transformations such as copying, minifying, compiling, etc.[Client][Server]
	</li>
</ul>
</p:proposed>

<p:committed>
  <p><i>None at this time.</i></p>
</p:committed>

<p:deferred>
  <p><i>None at this time.</i></p>
</p:deferred>

</p:theme>

<!-- ============================================== -->

<p:theme name="Node Development">
<p:description>
While the main server for a full Orion install is based on Java, it is a goal to support a full JavaScript development environment self hosted in JavaScript.
This Theme is around supporting a Node.js based server along with a file system and launching of Node applications.
</p:description>

<p:proposed>
<ul>
	<li>
		<strong>Node based Orion file system client</strong>
		Implement, using the Node.js file APIs a plugin to support browsing the filesystem on the Node.js host.  Security should be considered.
		[Client][Node]
	</li>
	<li>
		<strong>Node based single user Orion Server</strong>
		Implement, using the Node.js a single user version of the Orion Server.  This includes providing the pages, javascript, html and CSS required to
		render those components that can be supported by a node.js version of the server.  The server should be extensible to the point of allowing
		3rd parties to extend the server provided they can install new libraries on the same server as the running Node.js version of Orion.
		[Client][Node]
	</li>
	<li>
		<strong>Node based application launching, debugging and npm support</strong>
		Support for launching Node applications from within the Orion UI and providing support to assist in setting up debugging.  Additionally, provide features
		to aid in npm function access.
		[Client][Node]
	</li>
	<li>
		<strong>scriptd investigation as Node side scripting based on events</strong>
		Investigage scriptd as a method of providing scripting functionality based on events.
		[Client][Node]
	</li>
	<li>
		<strong>Look into how to support Node on standard Java server infrastructure (OrionHub.org)</strong>
		The default application launching for Node applications for testing will be provided through a node.js Server implementation of Orion. However,
		there should also be the option to self host at OrionHub.
		[Client][Server]
	</li>
	<li>
		<strong>Update the licensing terms for Orion to cover server code written in JavaScript</strong>
		At the moment the dual licensing portion of Orion is described to be the client side of Orion vs. the server. Since a Node.js based version 
		of an Orion server will be written in JavaScript it is desirable to have it dual licensed as well.
	</li>


</ul>
</p:proposed>

<p:committed>
<ul>
</ul>
</p:committed>

<p:deferred>
  <p><i>None at this time.</i></p>
</p:deferred>

</p:theme>

</p:themes_and_priorities>

<!-- ============================================== -->
</p:plan>
